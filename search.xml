<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关联申请单使用方式.md</title>
      <link href="/%E5%85%B3%E8%81%94%E7%94%B3%E8%AF%B7%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-md/"/>
      <url>/%E5%85%B3%E8%81%94%E7%94%B3%E8%AF%B7%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-md/</url>
      
        <content type="html"><![CDATA[<h3 id="add-html"><a href="#add-html" class="headerlink" title="add.html"></a>add.html</h3><ol><li>对应表单中引入通用列表视图</li><li>添加一个hidden input作为容器数据载体</li></ol><pre><code class="html">&lt;input type=&quot;hidden&quot; id=&quot;c-record_sid&quot; class=&quot;record_sid&quot; name=&quot;row[record_sid]&quot;  /&gt;&#123;include file=&quot;workflow/common/relevance_list&quot;&#125;&lt;!-- 实例代码 --&gt;&lt;div class=&quot;form-group&quot;&gt;    &lt;label class=&quot;control-label col-xs-12 col-sm-2&quot;&gt;&#123;:__(&#39;Record_sid&#39;)&#125;:&lt;/label&gt;    &lt;div class=&quot;col-xs-12 col-sm-8&quot;&gt;        &lt;div class=&quot;input-group&quot;&gt;            &lt;input type=&quot;hidden&quot; id=&quot;c-record_sid&quot; class=&quot;record_sid&quot; name=&quot;row[record_sid]&quot;  /&gt;            &#123;include file=&quot;workflow/common/relevance_list&quot;&#125;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="对应的add-js方法"><a href="#对应的add-js方法" class="headerlink" title="对应的add js方法"></a>对应的add js方法</h3><ol><li>在define中引入zby</li></ol><pre><code class="javascript">define([&#39;jquery&#39;, &#39;bootstrap&#39;, &#39;backend&#39;, &#39;table&#39;, &#39;form&#39;, &#39;zz&#39;, &#39;zby&#39;], function ($, undefined, Backend, Table, Form) &#123;    // 业务代码...</code></pre><ol start="2"><li>add方法中</li></ol><pre><code class="js">    // 审批流中不可写入时处理    if (form_field[&#39;record_sid&#39;][&#39;write&#39;] == 0) &#123;        // 设置关联申请单为不可操作模式        Zby.data.relevanceIsOperation = false    &#125;    // 初始化关联申请单 参数为容器数据载体    Zby.initRelevance(&quot;#c-record_sid&quot;)    // 注册按钮点击事件    $(&quot;#record_sid_container&quot;).on(&#39;click&#39;, function ()&#123;        // 打开选择关联申请单        Zby.openRelevanceForm(&quot;#c-record_sid&quot;)    &#125;)</code></pre><h3 id="contoller-add"><a href="#contoller-add" class="headerlink" title="contoller add"></a>contoller add</h3><pre><code class="php">    // 处理关联申请单信息    if (!empty($params[&#39;record_sid&#39;]))&#123;        // 先删除当前的申请单数据        Db::name(&#39;relevance_form&#39;)-&gt;where([            &#39;old_form_id&#39; =&gt; $formid, // 当前审批中的表单ID            &#39;old_biz_id&#39; =&gt; $result // 当前审批中的业务表ID        ])-&gt;delete();        // 批量插入数据        $newRelevanceDatas = [];        // 关联申请单默认传入JSON字符串        $relevances = json_decode($params[&#39;record_sid&#39;], true);        // 循环写入关联申请表        foreach ($relevances as $item)&#123;            $newRelevanceDatas[] = [                &#39;old_form_id&#39; =&gt; $formid, // 当前表单ID                &#39;old_biz_id&#39; =&gt; $result, // 当前业务ID                &#39;new_workflow_id&#39; =&gt; $item[&#39;workflow_id&#39;], // 关联申请单工作流ID                &#39;new_form_id&#39; =&gt; $item[&#39;form_id&#39;], // 当前申请单表单ID                &#39;new_biz_id&#39; =&gt; $item[&#39;biz_id&#39;] // 当前申请单业务ID            ];        &#125;        Db::name(&#39;relevance_form&#39;)-&gt;insertAll($newRelevanceDatas);    &#125;</code></pre><h3 id="edit-html"><a href="#edit-html" class="headerlink" title="edit.html"></a>edit.html</h3><blockquote><p>此处与新增操作一致</p></blockquote><pre><code class="html">&lt;input type=&quot;hidden&quot; id=&quot;c-record_sid&quot; class=&quot;record_sid&quot; name=&quot;row[record_sid]&quot;  /&gt;&#123;include file=&quot;workflow/common/relevance_list&quot;&#125;&lt;!-- 实例代码 --&gt;&lt;div class=&quot;form-group&quot;&gt;    &lt;label class=&quot;control-label col-xs-12 col-sm-2&quot;&gt;&#123;:__(&#39;Record_sid&#39;)&#125;:&lt;/label&gt;    &lt;div class=&quot;col-xs-12 col-sm-8&quot;&gt;        &lt;div class=&quot;input-group&quot;&gt;            &lt;input type=&quot;hidden&quot; id=&quot;c-record_sid&quot; class=&quot;record_sid&quot; name=&quot;row[record_sid]&quot;  /&gt;            &#123;include file=&quot;workflow/common/relevance_list&quot;&#125;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="controoler-edit-return-view"><a href="#controoler-edit-return-view" class="headerlink" title="controoler edit return view"></a>controoler edit return view</h3><p>1.js中需要表单ID与业务ID 所以在响应视图前需要进行值存储</p><pre><code class="php">$work_flow_id = $this-&gt;getWorkFlowId();$formid = Db::name(&#39;workflow_list&#39;)-&gt;where(&quot;id&quot;, $work_flow_id)-&gt;value(&#39;form_id&#39;);$this-&gt;assignconfig(&#39;form_id&#39;, $formid);$this-&gt;assignconfig(&#39;biz_id&#39;, $ids);</code></pre><h3 id="对应的js方法"><a href="#对应的js方法" class="headerlink" title="对应的js方法"></a>对应的js方法</h3><pre><code class="js">    // 审批流中不可写入时处理    if (form_field[&#39;record_sid&#39;][&#39;write&#39;] == 0) &#123;        // 设置关联申请单为不可操作模式        Zby.data.relevanceIsOperation = false    &#125;    // 初始化关联申请单 参数为容器数据载体     // 此处需要传入表单ID与业务ID  其它无变化    Zby.initRelevance(&quot;#c-record_sid&quot;, Config.form_id, Config.biz_id)    // 注册按钮点击事件    $(&quot;#record_sid_container&quot;).on(&#39;click&#39;, function ()&#123;        // 打开选择关联申请单        Zby.openRelevanceForm(&quot;#c-record_sid&quot;)    &#125;)</code></pre><h3 id="controller-edit-save"><a href="#controller-edit-save" class="headerlink" title="controller edit save"></a>controller edit save</h3><pre><code class="php">    // 先删除当前的申请单数据    Db::name(&#39;relevance_form&#39;)-&gt;where([        &#39;old_form_id&#39; =&gt; $formid, // 当前审批中的表单ID        &#39;old_biz_id&#39; =&gt; $result // 当前审批中的业务表ID    ])-&gt;delete();    // 处理关联申请单信息    if (!empty($params[&#39;record_sid&#39;]))&#123;                // 批量插入数据        $newRelevanceDatas = [];        // 关联申请单默认传入JSON字符串        $relevances = json_decode($params[&#39;record_sid&#39;], true);        // 循环写入关联申请表        foreach ($relevances as $item)&#123;            $newRelevanceDatas[] = [                &#39;old_form_id&#39; =&gt; $formid, // 当前表单ID                &#39;old_biz_id&#39; =&gt; $ids, // 当前业务ID                &#39;new_workflow_id&#39; =&gt; $item[&#39;workflow_id&#39;], // 关联申请单工作流ID                &#39;new_form_id&#39; =&gt; $item[&#39;form_id&#39;], // 当前申请单表单ID                &#39;new_biz_id&#39; =&gt; $item[&#39;biz_id&#39;] // 当前申请单业务ID            ];        &#125;        Db::name(&#39;relevance_form&#39;)-&gt;insertAll($newRelevanceDatas);    &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DockerDesktop错误总结</title>
      <link href="/DockerDesktop%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
      <url>/DockerDesktop%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h5><ul><li>windows11</li><li>AMD Ryzen 7 </li><li>16G+512</li></ul><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p><code>Docker Desktop System.InvalidOperationException</code></p><p>目前不知道该问题出现原因，在电脑重启后会发生该错误，解决方案如下</p><p>使用带有<strong>管理员权限</strong>的cmd执行、重启便可修复<br><code>netsh winsock reset</code></p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>问题出现原因<br>想在虚拟机里进行Docker环境学习开发，把本地Docker卸载时所发生的问题</p><p>首先我没有找到Docker desktop的卸载方法，使用windows自带卸载工具提示我无法完成<br>我试着将Docker desktop安装目录、容器目录删除 窃窃欢喜大功告成<br>过了几天后 想试着安装Docker desktop做一些简单的环境开发，却发现点击安装包时一直无响应</p><p>解决过程</p><ol><li><del>清理Docker安装目录（无效）</del><br><img src="https://img-blog.csdnimg.cn/84aa84bf02c54518b50d0d9477298451.png" alt="在这里插入图片描述"></li><li><del>安装进程监控器 找到Docker的UpgradeCodes(无效、没有执行UpgradeCodes进程)</del><br><img src="https://img-blog.csdnimg.cn/79e9fe2e9752496280cc7a3cf52a35f6.png" alt="在这里插入图片描述"><br>最终解决方案<br>windows下win+r、打开regedit(注册表)，搜索docker，将相关的注册表全部删除，重启电脑后再次尝试安装</li></ol><blockquote><p>删除时需仔细查看  有的可能不是docker的不用删除</p></blockquote><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><p>安装docker desktop后，状态栏点击quit、restart等功能按钮无效、进入设置一直加载、docker命令提示<br><code>Error response from daemon: open \\.\pipe\docker_engine_linux: The system cannot find the file specified</code></p><p>解决方案：</p><ol><li>管理员运行cmd或powershell</li></ol><pre><code class="powershell">cd &quot;C:\Program Files\Docker\Docker&quot;./DockerCli.exe -SwitchDaemon</code></pre><ol start="2"><li>DockerD desktop-&gt;TroubleShoot-&gt;Clean&#x2F;purge data-&gt;选择WSL 2-&gt;delete-&gt;重启Docker desktop<br><img src="https://img-blog.csdnimg.cn/1a42d2702a1d43aba345fd9b1d043eff.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/9ad27157bdb941f29199d96c79029809.png" alt="在这里插入图片描述"></li><li>进入docker desktop settings 取消WSL2，点击保存便可成功</li></ol><p><img src="https://img-blog.csdnimg.cn/aa5eec896027414aa07a0d77ab3658d3.png" alt="在这里插入图片描述"></p><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><p>WSL启动Ubuntu时报错“参考的对象类型不支持尝试的操作</p><p>方法一：<br>调用管理员终端输入</p><pre><code class="shell">    netsh winsock reset</code></pre><p>执行后无需重启，便可以顺利打开Ubuntu，报错消失。<br>但是不得不说确实是“临时方法”，每次开机都要输一遍指令太麻烦了</p><p>方法二：<br>下载NoLsp.exe</p><p>方法三：<br>关闭游戏加速器</p>]]></content>
      
      
      <categories>
          
          <category> 错误排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Docker</title>
      <link href="/%E5%88%9D%E8%AF%86Docker/"/>
      <url>/%E5%88%9D%E8%AF%86Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h1><p><strong>Docker</strong> 最初是 <code>dotCloud</code> 公司创始人 <a href="https://github.com/shykes">Solomon Hykes</a> 在法国期间发起的一个公司内部项目，它是基于 <code>dotCloud</code> 公司多年云服务技术的一次革新，并于 [2013 年 3 月以 Apache 2.0 授权协议开源][docker-soft]，主要项目代码在 <a href="https://github.com/moby/moby">GitHub</a> 上进行维护。<code>Docker</code> 项目后来还加入了 Linux 基金会，并成立推动 <a href="https://opencontainers.org/">开放容器联盟（OCI）</a>。</p><p><strong>Docker</strong> 自开源后受到广泛的关注和讨论，至今其 <a href="https://github.com/moby/moby">GitHub 项目</a> 已经超过 5 万 7 千个星标和一万多个 <code>fork</code>。甚至由于 <code>Docker</code> 项目的火爆，在 <code>2013</code> 年底，<a href="https://www.docker.com/blog/dotcloud-is-becoming-docker-inc/">dotCloud 公司决定改名为 Docker</a>。<code>Docker</code> 最初是在 <code>Ubuntu 12.04</code> 上开发实现的；<code>Red Hat</code> 则从 <code>RHEL 6.5</code> 开始对 <code>Docker</code> 进行支持；<code>Google</code> 也在其 <code>PaaS</code> 产品中广泛应用 <code>Docker</code>。</p><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 <code>1.11</code> 版本开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</p><p><img src="http://cos.teanxo.cn/202208311529719.png" alt="Docker 架构"></p><blockquote><p><code>runc</code> 是一个 Linux 命令行工具，用于根据 <a href="https://github.com/opencontainers/runtime-spec">OCI容器运行时规范</a> 创建和运行容器。</p></blockquote><blockquote><p><code>containerd</code> 是一个守护程序，它管理容器生命周期，提供了在一个节点上执行容器和管理镜像的最小功能集。</p></blockquote><p><strong>Docker</strong> 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 <strong>Docker</strong> 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p><img src="http://cos.teanxo.cn/202208311530607.png" alt="传统虚拟化"></p><p><img src="http://cos.teanxo.cn/202208311530817.png" alt="Docker"></p><h1 id="为什么要使用-Docker？"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a>为什么要使用 Docker？</h1><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><h2 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h2><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h2 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h2><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h2 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h2><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><h2 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h2><p>对开发和运维（<a href="https://zh.wikipedia.org/wiki/DevOps">DevOps</a>）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 <code>Docker</code> 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <a href="../image/dockerfile/">Dockerfile</a> 来进行镜像构建，并结合 <a href="https://en.wikipedia.org/wiki/Continuous_integration">持续集成(Continuous Integration)</a> 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 <a href="https://en.wikipedia.org/wiki/Continuous_delivery">持续部署(Continuous Delivery&#x2F;Deployment)</a> 系统进行自动部署。</p><p>而且使用 <a href="../image/build.md"><code>Dockerfile</code></a> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h2 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h2><p>由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h2 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h2><p><code>Docker</code> 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 <a href="https://hub.docker.com/search/?type=image&image_filter=official">官方镜像</a>，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h2 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h2><table><thead><tr><th align="left">特性</th><th align="left">容器</th><th align="left">虚拟机</th></tr></thead><tbody><tr><td align="left">启动</td><td align="left">秒级</td><td align="left">分钟级</td></tr><tr><td align="left">硬盘使用</td><td align="left">一般为 <code>MB</code></td><td align="left">一般为 <code>GB</code></td></tr><tr><td align="left">性能</td><td align="left">接近原生</td><td align="left">弱于</td></tr><tr><td align="left">系统支持量</td><td align="left">单机支持上千个容器</td><td align="left">一般几十个</td></tr></tbody></table><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>Docker</strong> 包括三个基本概念</p><ul><li><strong>镜像</strong>（<code>Image</code>）</li><li><strong>容器</strong>（<code>Container</code>）</li><li><strong>仓库</strong>（<code>Repository</code>）</li></ul><p>理解了这三个概念，就理解了 <strong>Docker</strong> 的整个生命周期。</p><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><p>我们都知道，操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。对于 <code>Linux</code> 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 <strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><h2 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h2><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 <code>ISO</code> 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h1 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h1><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <a href="../data_management/volume.md">数据卷（Volume）</a>、或者 <a href="../data_management/bind-mounts.md">绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h1 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h1><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="../repository/registry.md">Docker Registry</a> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 <a href="https://hub.docker.com/_/ubuntu">Ubuntu 镜像</a> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>16.04</code>, <code>18.04</code>。我们可以通过 <code>ubuntu:16.04</code>，或者 <code>ubuntu:18.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><h2 id="Docker-Registry-公开服务"><a href="#Docker-Registry-公开服务" class="headerlink" title="Docker Registry 公开服务"></a>Docker Registry 公开服务</h2><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的 <a href="https://hub.docker.com/search?q=&type=image&image_filter=official">官方镜像</a>。除此以外，还有 Red Hat 的 <a href="https://quay.io/repository/">Quay.io</a>；Google 的 <a href="https://cloud.google.com/container-registry/">Google Container Registry</a>，<a href="https://kubernetes.io/">Kubernetes</a> 的镜像使用的就是这个服务；代码托管平台 <a href="https://github.com/">GitHub</a> 推出的 <a href="https://docs.github.com/cn/packages/working-with-a-github-packages-registry/working-with-the-container-registry">ghcr.io</a>。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为 <strong>加速器</strong>。常见的有 <a href="https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 <a href="../install/mirror.md">安装 Docker</a>  一节中有详细的配置方法。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://c.163.com/hub#/m/library/">网易云镜像服务</a>、<a href="https://hub.daocloud.io/">DaoCloud 镜像市场</a>、<a href="https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu">阿里云镜像库</a> 等。</p><h2 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h2><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://hub.docker.com/_/registry/">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。在 <a href="../repository/registry.md">私有仓库</a> 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p><p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。</p><p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，<a href="https://github.com/goharbor/harbor">Harbor</a> 和 <a href="../repository/nexus3_registry.md">Sonatype Nexus</a>。<br>Footer<br>© 2022 GitHub, Inc.<br>Footer navigation<br>Terms<br>Privacy<br>Security<br>Status<br>Docs<br>Contact GitHub<br>Pricing</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDK8之Stream流用法</title>
      <link href="/JDK8%E4%B9%8BStream%E6%B5%81%E7%94%A8%E6%B3%95/"/>
      <url>/JDK8%E4%B9%8BStream%E6%B5%81%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>##Java8 Stream 流操作<br>现在的业务越来越复复杂话、随着JDK版本主键的更替一种新的操作诞生 流操作<br>以下描述一些我自己用到的一些场景与用法</p><p>####List转Map<br>常见的</p><pre><code class="java">Map&lt;Long, MessageDetail&gt; messageMap = list.stream().collect(Collectors.toMap(MessageDetail::getMessageTypeId, v -&gt; v));</code></pre><p>如果按照MessageTypeId作为Key转成Map遇到相同的typeId处理方式</p><pre><code class="java">Map&lt;Long, MessageDetail&gt; messageMap = list.stream().collect(Collectors.toMap(MessageDetail::getMessageTypeId, v -&gt; v,(a,b)-&gt;a));</code></pre><p>如果遇到相同的Key怎么按照自己的规则去取舍？</p><pre><code class="java">    public static &lt;T, K, U&gt;    Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(Function&lt;? super T, ? extends K&gt; keyMapper,                                    Function&lt;? super T, ? extends U&gt; valueMapper,                                    BinaryOperator&lt;U&gt; mergeFunction) &#123;        return toMap(keyMapper, valueMapper, mergeFunction, HashMap::new);    &#125;    1.第一个参数是以什么作为Key     2.第二个参数是以什么作为Value    3.如果遇到相同的怎么取舍？Map&lt;Long, MessageDetail&gt; messageMap = list.stream().collect(Collectors.toMap(MessageDetail::getMessageTypeId, v -&gt; v,BinaryOperator.minBy((v1,v2) -&gt;v1.getId().compareTo(v2.getId()))));也可以简写Map&lt;Long, MessageDetail&gt; messageMap = list.stream().collect(Collectors.toMap(MessageDetail::getMessageTypeId, v -&gt; v,BinaryOperator.minBy(Comparator.comparing(MessageDetail::getId))));    1.按照messageTypeId作为Key 转Map    2.返回自己作为 Value    3.如果遇到 messageTypeId相同的 根据对象的 id判断取最小保留</code></pre><p>####List 排序<br>贴一个常用的类所有stream的操作都用以下实体类</p><pre><code class="java">public class Student &#123;    private Long id;    private Integer age;    private Integer sort;    private String name;    private Integer sex;&#125;</code></pre><p>1.默认排序<br>2.按照字段排序<br>3.按照字段倒序<br>3.多字段排序</p><pre><code class="java">默认排序list.stream().sorted().toList();按照 id排序（默认是正序）list.stream().sorted(Comparator.comparing(Student::getId)).toList();按照ID 排序 倒序list.stream().sorted(Comparator.comparing(Student::getId).reversed()).toList();多字段排序 关键词  thenComparinglist.stream().sorted(Comparator.comparing(Student::getId).thenComparing(Student::getAge).reversed()).toList();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis类型转换器</title>
      <link href="/Mybatis%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
      <url>/Mybatis%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>我们应该都遇到过这种需求或者是这种表结构设计的字段<br><code>ids varchar(255)</code> 存储ID  逗号’,’分割 的字符串<br> ids顾名思义 就是自己定义符合自己规则的字段每次查询在去特殊处理<br> 在Mybatis传统框架中使用方式 自定义一个转换器 继承 BaseTypeHandler类在去实现某些方法<br> <a href="https://blog.csdn.net/qq_48569009/article/details/124208363">传送门</a><br>接下来我想说的是 Mybatis-plus的使用方式非常之方便<br>关键类<br>FastjsonTypeHandler 或者 JacksonTypeHandler 这里我使用的是 第二个</p><h5 id="1-定义转换器（上代码）"><a href="#1-定义转换器（上代码）" class="headerlink" title="1.定义转换器（上代码）"></a>1.定义转换器（上代码）</h5><pre><code class="java">public class ListLongTypeHandler extends JacksonTypeHandler &#123;    public ListLongTypeHandler(Class&lt;?&gt; type) &#123;        super(type);    &#125;    @Override    protected Object parse(String json) &#123;        if(VariableUtil.isNotEmpty(json))&#123;            try&#123;                return Arrays.stream(json.split(&quot;,&quot;)).map(Long::parseLong).toList();            &#125;catch (Exception e) &#123;                return new ArrayList&lt;Long&gt;();            &#125;        &#125;else&#123;            return new ArrayList&lt;&gt;();        &#125;    &#125;    @Override    protected String toJson(Object obj) &#123;        if(VariableUtil.isNotEmpty(obj))&#123;            List&lt;Long&gt; list = (List&lt;Long&gt;)obj;            return list.stream().map(v -&gt; v.toString()).collect(Collectors.joining(&quot;,&quot;));        &#125;else&#123;            return &quot;&quot;;        &#125;    &#125;&#125;</code></pre><p>其中只需要实现 toJson 控制 传入操作  parse传出操作 即可</p><h5 id="2-配置转换器"><a href="#2-配置转换器" class="headerlink" title="2.配置转换器"></a>2.配置转换器</h5><pre><code class="java">1.给实体类添加 注解类型 @TableName(autoResultMap = true)2.给字段添加 转换器注解@TableField(typeHandler = ListLongTypeHandler.class)private List&lt;Long&gt; otherIds;</code></pre><p>只需要这两步  使用mybatis-plus的操作就可以完成自动转换了。</p>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付V3版本对接</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98V3%E7%89%88%E6%9C%AC%E5%AF%B9%E6%8E%A5/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98V3%E7%89%88%E6%9C%AC%E5%AF%B9%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>当需要使用微信支付时，需确保有一个可使用的appid，这里包括(微信公众平台、微信小程序、微信开放平台)等</p><pre><code class="mermaid">graph LR;subgraph 流程B[申请密钥证书等配置]B==&gt;C[获取微信平台证书]C==&gt;D[将以上所有参数进行调用]end</code></pre><h3 id="V3所需配置"><a href="#V3所需配置" class="headerlink" title="V3所需配置"></a>V3所需配置</h3><ul><li>keyPath：apiclient_key.pem 商户 key 绝对路径</li><li>certPath：capiclient_cert.pem 商户证书绝对路径</li><li>certP12Path：apiclient_cert.p12 证书绝对路径（暂未使用、可忽略）</li><li>platformCertPath：wx_cert.pem 微信平台证书绝对路径，证书需要通过接口获取</li><li>mchId：微信支付商户号</li><li>apiKey3：Api-V3密钥</li></ul><h3 id="微信商户证书申请流程"><a href="#微信商户证书申请流程" class="headerlink" title="微信商户证书申请流程"></a>微信商户证书申请流程</h3><ol><li>登录商户平台</li><li>账户中心</li><li>api安全</li><li>生成证书</li></ol><p>此步骤操作后可拿到(apiclient_key.pem、capiclient_cert.pem、apiclient_cert.p12)</p><h3 id="微信平台证书-platformCertPath-获取步骤"><a href="#微信平台证书-platformCertPath-获取步骤" class="headerlink" title="微信平台证书(platformCertPath)获取步骤"></a>微信平台证书(platformCertPath)获取步骤</h3><p>使用<a href="https://github.com/wechatpay-apiv3/CertificateDownloader">Certificate Downloader</a>进行生成</p><h4 id="所需配置"><a href="#所需配置" class="headerlink" title="所需配置"></a>所需配置</h4><ol><li>商户的私钥文件(-f)：apiclient_key.pem路径</li><li>证书解密的密钥(-k)：Api-V3密钥</li><li>微信支付商户号(-m)：对应mchId</li><li>微信证书输出路径(-o)</li><li>商户证书序列号(-s)：申请商户证书后可查看序列号、或<a href="#%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%9F%A5%E7%9C%8B%E8%AF%81%E4%B9%A6%E5%BA%8F%E5%88%97%E5%8F%B7">点击此处查看</a></li></ol><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>下载Certificate Downloader.jar文件</li><li>执行完整命令</li></ol><pre><code class="shell">java -jar CertificateDownloader-1.1.jar -k $&#123;apiV3key&#125; -m $&#123;mchId&#125; -f $&#123;mchPrivateKeyFilePath&#125; -s $&#123;mchSerialNo&#125; -o $&#123;outputFilePath&#125;</code></pre><h3 id="微信支付查看证书序列号"><a href="#微信支付查看证书序列号" class="headerlink" title="微信支付查看证书序列号"></a>微信支付查看证书序列号</h3><p>证书打包解压路径内执行(微信支付v2  v3密钥必须32位，不然可保存，但使用会报签名错误)</p><pre><code class="shell">openssl x509 -in apiclient_cert.pem -noout -serial</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis  Could not create connection to database server. Attempted reconnect 3 times. Giving up</title>
      <link href="/mybatis%20%20Could%20not%20create%20connection%20to%20database%20server.%20Attempted%20reconnect%203%20times.%20Giving%20up/"/>
      <url>/mybatis%20%20Could%20not%20create%20connection%20to%20database%20server.%20Attempted%20reconnect%203%20times.%20Giving%20up/</url>
      
        <content type="html"><![CDATA[<h3 id="mybatis-Could-not-create-connection-to-database-server-Attempted-reconnect-3-times-Giving-up"><a href="#mybatis-Could-not-create-connection-to-database-server-Attempted-reconnect-3-times-Giving-up" class="headerlink" title="mybatis  Could not create connection to database server. Attempted reconnect 3 times. Giving up"></a>mybatis  Could not create connection to database server. Attempted reconnect 3 times. Giving up</h3><p>原文翻译</p><pre><code>无法创建到数据库服务器的连接。尝试重新连接3次。放弃</code></pre><p>今天在创建新项目时发生的错误，经过一系列的排查，发现是设置datasource.url原因所致</p><pre><code class="yml">    # 此配置可运行    url: jdbc:mysql://localhost:3306/master?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC    # 此配置会导致错误    url: jdbc:mysql://localhost:3006/madmin?useUnicode=true&amp;useSSL=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;serverTimezone=UTC</code></pre><p>显然问题出在了<code>autoReconnect</code>上面，平时都是赋值粘贴这个配置，还没有好好的看过，然后就去搜了下这个参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>autoReconnect</td><td>驱动程序是否应该尝试重新建立连接? 如果启用了，驱动程序将会对陈旧或死亡连接上发出的查询抛出异常，这些查询属于当前事务，但是在新事务中对连接发出的下一个查询之前会尝试重新连接。 不推荐这个功能的使用,因为它有副作用与会话状态和数据一致性当应用程序不妥善处理异常,仅设计用于当你无法配置您的应用程序来处理异常造成死亡和陈旧的正确连接。 另外，作为最后一个选项，研究将MySQL服务器变量“wait_timeout”设置为一个较高的值，而不是默认的8小时。</td></tr><tr><td>maxReconnects</td><td>如果autoReconnect为true，则尝试重新连接的最大次数，默认为’3’。</td></tr><tr><td>initialTimeout</td><td>如果启用了autoReconnect，重新连接尝试之间的初始等待时间(以秒为单位，默认为’2’)。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 错误排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kibana安装问题</title>
      <link href="/Kibana%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
      <url>/Kibana%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Kibana安装后产生CREATE-NEW-TARGET-gt-CREATE-NEW-TARGET错误问题"><a href="#Kibana安装后产生CREATE-NEW-TARGET-gt-CREATE-NEW-TARGET错误问题" class="headerlink" title="Kibana安装后产生CREATE_NEW_TARGET -&gt; CREATE_NEW_TARGET错误问题"></a>Kibana安装后产生CREATE_NEW_TARGET -&gt; CREATE_NEW_TARGET错误问题</h2><p>解决方案</p><p>找到es中的elasticsearch.yml文件 检查以下配置是否正确</p><pre><code class="yml"># Enable security featuresxpack.security.enabled: falsexpack.security.enrollment.enabled: true# Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agentsxpack.security.http.ssl:enabled: falsekeystore.path: certs/http.p12# Enable encryption and mutual authentication between cluster nodesxpack.security.transport.ssl:enabled: falseverification_mode: certificatekeystore.path: certs/transport.p12truststore.path: certs/transport.p12# Create a new cluster with the current node only# Additional nodes can still join the cluster latercluster.initial_master_nodes: [&quot;Node1&quot;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 错误排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实例多次调用问题</title>
      <link href="/JavaScript%E5%AE%9E%E4%BE%8B%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/JavaScript%E5%AE%9E%E4%BE%8B%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在开发过程中遇到以下需求<br /><br>在一个视图内，渲染两次组织架构树，分别用于两种字段的存取值与渲染，由于同事已经写过这个功能，所以我就只需要将核心的代码拿来复用即可</p><p>写出来的代码结构大致如下</p><pre><code class="JavaScript">api: &#123;    tree: &#123;        return &#123;            // tree的渲染配置参数            config: &#123;                ...省略内部配置            &#125;,            // tree 初始化            init() &#123;                ...根据conifg配置进行渲染tree            &#125;,            getList()&#123;                require([&#39;jstree&#39;], function ()&#123;                    ...内部业务方法，每次tree操作事件 都会执行该方法作为刷新tree树事件                &#125;)            &#125;        &#125;    &#125;&#125;</code></pre><p>方法调用</p><pre><code class="JavaScript">        // 设置A的配置信息 例如dom结构        api.tree.config.userIdsEvent = &quot;#rule_box&quot;        api.tree.config.checkAllEvent = &quot;#rule_box_checkall&quot;        api.tree.config.expandAllEvent = &quot;#rule_box_expandall&quot;        api.tree.config.ck = Config.rule_box_ck;        // 加载tree初始化        api.tree.init()        // 延迟1秒执行 1秒后进行tree结构默认选中操作        setTimeout(function ()&#123;            ... 默认选中tree节点            $(api.tree.channelEvent).jstree(&quot;check_node&quot;, api.tree.config.ck);            api.tree.getList(that);        &#125;, 1000)        // 设置B的配置信息 例如dom结构        api.tree.config.userIdsEvent = &quot;#push_box&quot;        api.tree.config.checkAllEvent = &quot;#push_box_checkall&quot;        api.tree.config.expandAllEvent = &quot;#push_box_expandall&quot;        api.tree.config.ck = Config.push_box_ck;        // 加载tree初始化        api.tree.init()        // 延迟1秒执行 1秒后进行tree结构默认选中操作        setTimeout(function ()&#123;            ... 默认选中tree节点            $(api.tree.channelEvent).jstree(&quot;check_node&quot;, api.tree.config.ck);            api.tree.getList(that);        &#125;, 1000)</code></pre><p>乍一看好像没啥问题，运行后才发现  第一个tree不会渲染 只会渲染第二个</p><p>经过仔细思考后觉得应该是require内部引用是异步的问题，当赋值完后 require拿到的是第二个的配置信息</p><p>于是再次进行修改</p><p>方法调用</p><pre><code class="JavaScript">    require([&#39;jstree&#39;], function ()&#123;        // 设置A的配置信息 例如dom结构        api.tree.config.userIdsEvent = &quot;#rule_box&quot;        api.tree.config.checkAllEvent = &quot;#rule_box_checkall&quot;        api.tree.config.expandAllEvent = &quot;#rule_box_expandall&quot;        api.tree.config.ck = Config.rule_box_ck;                    // 加载tree初始化        api.tree.init()        // 延迟1秒执行 1秒后进行tree结构默认选中操作        setTimeout(function ()&#123;             ... 默认选中tree节点赋值            $(api.tree.channelEvent).jstree(&quot;check_node&quot;, api.tree.config.ck);            api.tree.getList(that);        &#125;, 1000)                &#125;)    require([&#39;jstree&#39;], function ()&#123;        // 设置B的配置信息 例如dom结构        api.tree.config.userIdsEvent = &quot;#push_box&quot;        api.tree.config.checkAllEvent = &quot;#push_box_checkall&quot;        api.tree.config.expandAllEvent = &quot;#push_box_expandall&quot;        api.tree.config.ck = Config.push_box_ck;        // 加载tree初始化        api.tree.init()        // 延迟1秒执行 1秒后进行tree结构默认选中操作        setTimeout(function ()&#123;            ... 默认选中tree节点赋值            $(api.tree.channelEvent).jstree(&quot;check_node&quot;, api.tree.config.ck);            api.tree.getList(that);        &#125;, 1000)    &#125;)</code></pre><p>将require在外部两次引用，这次确实是将tree渲染出来了，但是没有默认选中，冷静下来思考后想起来js深拷贝浅拷贝的问题，当setTimeout执行的时候，第二次赋值将会覆盖掉第一次的赋值，因为该操作指向的都是同一个内存地址，对同一个内存属性进行操作</p><p>于是我就尝试使用JSON暴力拷贝方式</p><pre><code class="JavaScript">    let that = JSON.parse(JSON.stringify(api.tree))    that.config.userIdsEvent = &quot;#push_box&quot;    that.config.checkAllEvent = &quot;#push_box_checkall&quot;    that.config.expandAllEvent = &quot;#push_box_expandall&quot;                // 加载tree初始化    that.init()    // 延迟1秒执行 1秒后进行tree结构默认选中操作    setTimeout(function ()&#123;        ... 默认选中tree节点        $(that.channelEvent).jstree(&quot;check_node&quot;, that.config.ck);        api.tree.getList(that);    &#125;, 1000)</code></pre><p>结果抛出错误 init方法找不到，这里学到了新的知识点</p><blockquote><p>使用JSON暴力拷贝，不会进行拷贝函数</p></blockquote><p>经过百般思考，想到了class 但是显然我的业务逻辑改为class稍微麻烦，而且对js的面向对象编程并不熟悉，决定将属性改为方法进行 <code>new</code>创建，互不冲突，最后的代码如下</p><pre><code class="JavaScript">api: &#123;    tree: function ()&#123;        return &#123;            config: &#123;               ...省略内部配置             &#125;,            // tree 初始化            init() &#123;                ...根据conifg配置进行渲染tree            &#125;,            getList()&#123;                require([&#39;jstree&#39;], function ()&#123;                    ...内部业务方法，每次tree操作事件 都会执行该方法作为刷新tree树事件                &#125;)            &#125;        &#125;    &#125;&#125;</code></pre><pre><code class="JavaScript">require([&#39;jstree&#39;], function ()&#123;    let that = new api.tree()    that.config.userIdsEvent = &quot;#push_box&quot;    that.config.checkAllEvent = &quot;#push_box_checkall&quot;    that.config.expandAllEvent = &quot;#push_box_expandall&quot;                // 加载tree初始化    that.init()    // 延迟1秒执行 1秒后进行tree结构默认选中操作    setTimeout(function ()&#123;        ... 默认选中tree节点        $(that.channelEvent).jstree(&quot;check_node&quot;, that.config.ck);        that.getList(that);    &#125;, 1000)&#125;)require([&#39;jstree&#39;], function ()&#123;        // 设置B的配置信息 例如dom结构        let that = new api.tree()        that.config.userIdsEvent = &quot;#push_box&quot;        that.config.checkAllEvent = &quot;#push_box_checkall&quot;        that.config.expandAllEvent = &quot;#push_box_expandall&quot;        that.config.ck = Config.push_box_ck;        // 加载tree初始化        that.init()        // 延迟1秒执行 1秒后进行tree结构默认选中操作        setTimeout(function ()&#123;            ... 默认选中tree节点赋值            $(that.channelEvent).jstree(&quot;check_node&quot;, that.config.ck);            that.getList(that);        &#125;, 1000)    &#125;)</code></pre><p>哎~ 又是趟坑的一天</p>]]></content>
      
      
      <categories>
          
          <category> 错误排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
